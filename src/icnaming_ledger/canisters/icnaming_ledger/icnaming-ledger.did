type AccountIdentifier = vec nat8;
type BlockHeight = nat64;
type CanisterId = principal;
type ICPTs = record { e8s: nat64; };
type Memo = nat64;
type NeuronId = nat64;
type SubAccount = vec nat8;
type PaymentId = nat64;

type AddPaymentRequest =
    record {
        created_remark: text;
        amount: ICPTs;
    };

type AddPaymentResponse =
    record {
        payment_id: PaymentId;
        memo: Memo;
        payment_account_id: AccountIdentifier;
    };

type VerifyPaymentRequest =
    record {
        payment_id: PaymentId;
    };

type VerifyPaymentResponse =
    variant {
        NeedMore : record {
            amount: ICPTs;
            received_amount: ICPTs;
        };
        Paid : record {
            paid_at: Timestamp;
        };
        PaymentNotFound;
    };

type SyncICPPaymentRequest =
    record {
        block_height: BlockHeight;
    };

type SyncICPPaymentResponse =
    record {
        payment_id: opt PaymentId;
        verify_payment_response: opt VerifyPaymentResponse;
    };

type RefundPaymentRequest =
    record {
        payment_id: PaymentId;
    };

type RefundPaymentResponse =
    variant {
        Refunded : record {
            refunded_amount: ICPTs;
        };
        Refunding;
        RefundFailed;
        PaymentNotFound;
    };

type Timestamp = 
    record {
        timestamp_nanos: nat64;
    };

type Stats =
    record {
        cycles_balance: nat64,
        transactions_count: nat64,
        block_height_synced_up_to: opt nat64,
        earliest_transaction_timestamp_nanos: nat64,
        earliest_transaction_block_height: BlockHeight,
        latest_transaction_timestamp_nanos: nat64,
        latest_transaction_block_height: BlockHeight,
        seconds_since_last_ledger_sync: nat64,
        count_of_payments_by_status: vec record { text; nat64 },
        payments_version: nat64,
    };

service : {
    add_payment: (AddPaymentRequest) -> (AddPaymentResponse);
    verify_payment: (VerifyPaymentRequest) -> (VerifyPaymentResponse) query;
    sync_icp_payment: (SyncICPPaymentRequest) -> (SyncICPPaymentResponse);
    get_stats: () -> (Stats) query;
    refund_payment: (RefundPaymentRequest) -> (RefundPaymentResponse);
    add_stable_asset: (asset: blob) -> ();
}

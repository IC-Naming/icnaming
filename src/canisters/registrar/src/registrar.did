type BatchTransferRequest = record { items : vec TransferQuotaDetails };
type BooleanActorResponse = variant { Ok : bool; Err : ErrorInfo };
type CallbackStrategy = record { token : Token; callback : func () -> () };
type CanisterNames = variant {
  NamingMarketplace;
  RegistrarControlGateway;
  DICP;
  CyclesMinting;
  Registrar;
  MysteryBox;
  Registry;
  Ledger;
  Favorites;
  Resolver;
};
type ErrorInfo = record { code : nat32; message : text };
type GetAllDetailsActorResponse = variant {
  Ok : vec RegistrationDetails;
  Err : ErrorInfo;
};
type GetDetailsActorResponse = variant {
  Ok : RegistrationDetails;
  Err : ErrorInfo;
};
type GetNameExpiresActorResponse = variant { Ok : nat64; Err : ErrorInfo };
type GetNameOrderResponse = record {
  status : NameOrderStatus;
  name : text;
  created_at : nat64;
  price_icp_in_e8s : nat;
  created_user : principal;
  years : nat32;
};
type GetNamesActorResponse = variant { Ok : GetPageOutput; Err : ErrorInfo };
type GetOwnerActorResponse = variant { Ok : principal; Err : ErrorInfo };
type GetPageInput = record { offset : nat64; limit : nat64 };
type GetPageOutput = record { items : vec RegistrationDto };
type GetPendingOrderActorResponse = variant {
  Ok : opt GetNameOrderResponse;
  Err : ErrorInfo;
};
type GetPriceTableResponse = variant { Ok : PriceTable; Err : ErrorInfo };
type GetPublicResolverActorResponse = variant { Ok : text; Err : ErrorInfo };
type GetQuotaActorResponse = variant { Ok : nat32; Err : ErrorInfo };
type GetStatsResponse = variant { Ok : Stats; Err : ErrorInfo };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type ImportNameRegistrationItem = record {
  owner : principal;
  name : text;
  years : nat32;
};
type ImportNameRegistrationRequest = record {
  items : vec ImportNameRegistrationItem;
};
type ImportQuotaItem = record {
  owner : principal;
  diff : nat32;
  quota_type : text;
};
type ImportQuotaRequest = record {
  hash : vec nat8;
  items : vec ImportQuotaItem;
};
type ImportQuotaResponse = variant { Ok : ImportQuotaStatus; Err : ErrorInfo };
type ImportQuotaStatus = variant { Ok; AlreadyExists };
type InitArgs = record {
  dev_named_canister_ids : vec record { CanisterNames; principal };
};
type NameOrderStatus = variant { New; WaitingToRefund; Done; Canceled };
type PriceTable = record {
  icp_xdr_conversion_rate : nat64;
  items : vec PriceTableItem;
};
type PriceTableItem = record {
  len : nat8;
  price_in_icp_e8s : nat64;
  price_in_xdr_permyriad : nat64;
};
type QuotaType = variant { LenEq : nat8; LenGte : nat8 };
type RegistrationDetails = record {
  owner : principal;
  name : text;
  created_at : nat64;
  expired_at : nat64;
};
type RegistrationDto = record {
  name : text;
  created_at : nat64;
  expired_at : nat64;
};
type RenewNameRequest = record {
  name : text;
  approve_amount : nat64;
  years : nat32;
};
type StateExportData = record { state_data : vec nat8 };
type StateExportResponse = variant { Ok : StateExportData; Err : ErrorInfo };
type Stats = record {
  user_count : nat64;
  new_registered_name_count : nat64;
  cycles_balance : nat64;
  last_xdr_permyriad_per_icp : nat64;
  name_order_cancelled_count : nat64;
  user_quota_count : vec record { text; nat64 };
  name_order_placed_count : nat64;
  name_order_paid_count : nat64;
  user_name_order_count_by_status : vec record { text; nat64 };
  last_timestamp_seconds_xdr_permyriad_per_icp : nat64;
  name_lock_count : nat64;
  payment_version : nat64;
  user_quota_order_count : vec record { text; nat64 };
  registration_count : nat64;
};
type StreamingStrategy = variant { Callback : CallbackStrategy };
type SubmitOrderActorResponse = variant {
  Ok : SubmitOrderResponse;
  Err : ErrorInfo;
};
type SubmitOrderRequest = record { name : text; years : nat32 };
type SubmitOrderResponse = record { order : GetNameOrderResponse };
type Token = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type TransferFromQuotaRequest = record {
  to : principal;
  diff : nat32;
  from : principal;
  quota_type : QuotaType;
};
type TransferQuotaDetails = record {
  to : principal;
  diff : nat32;
  quota_type : QuotaType;
};
service : (opt InitArgs) -> {
  add_quota : (principal, QuotaType, nat32) -> (BooleanActorResponse);
  approve : (text, principal) -> (BooleanActorResponse);
  available : (text) -> (BooleanActorResponse) query;
  batch_transfer_quota : (BatchTransferRequest) -> (BooleanActorResponse);
  cancel_order : () -> (BooleanActorResponse);
  export_state : () -> (StateExportResponse);
  get_all_details : (GetPageInput) -> (GetAllDetailsActorResponse) query;
  get_details : (text) -> (GetDetailsActorResponse) query;
  get_last_registrations : () -> (GetAllDetailsActorResponse) query;
  get_name_expires : (text) -> (GetNameExpiresActorResponse) query;
  get_names : (principal, GetPageInput) -> (GetNamesActorResponse) query;
  get_owner : (text) -> (GetOwnerActorResponse) query;
  get_pending_order : () -> (GetPendingOrderActorResponse) query;
  get_price_table : () -> (GetPriceTableResponse);
  get_public_resolver : () -> (GetPublicResolverActorResponse) query;
  get_quota : (principal, QuotaType) -> (GetQuotaActorResponse) query;
  get_stats : () -> (GetStatsResponse) query;
  get_wasm_info : () -> (vec record { text; text }) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  import_quota : (ImportQuotaRequest) -> (ImportQuotaResponse);
  import_registrations : (ImportNameRegistrationRequest) -> (
      BooleanActorResponse,
    );
  load_state : (StateExportData) -> (BooleanActorResponse);
  pay_my_order : () -> (BooleanActorResponse);
  reclaim_name : (text) -> (BooleanActorResponse);
  register_for : (text, principal, nat64) -> (BooleanActorResponse);
  register_from_gateway : (text, principal) -> (BooleanActorResponse);
  register_with_quota : (text, QuotaType) -> (BooleanActorResponse);
  renew_name : (RenewNameRequest) -> (BooleanActorResponse);
  run_tasks : () -> (BooleanActorResponse);
  sub_quota : (principal, QuotaType, nat32) -> (BooleanActorResponse);
  submit_order : (SubmitOrderRequest) -> (SubmitOrderActorResponse);
  transfer : (text, principal) -> (BooleanActorResponse);
  transfer_by_admin : (text, principal) -> (BooleanActorResponse);
  transfer_from : (text) -> (BooleanActorResponse);
  transfer_from_quota : (TransferFromQuotaRequest) -> (BooleanActorResponse);
  transfer_quota : (principal, QuotaType, nat32) -> (BooleanActorResponse);
  unlock_names : (vec text) -> (BooleanActorResponse);
}

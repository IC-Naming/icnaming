type ErrorInfo = record { code : nat32; message : text };
type GetPageInput = record { offset : nat64; limit : nat64 };
type GetPageOutput = record { items : vec RegistrationDto };
type QuotaType = variant { LenEq : nat8; LenGte : nat8 };
type RegistrationDetails = record {
  owner : principal;
  name : text;
  created_at : nat64;
  expired_at : nat64;
};
type RegistrationDto = record {
  name : text;
  created_at : nat64;
  expired_at : nat64;
};
type Result = variant { Ok : bool; Err : ErrorInfo };
type Result_1 = variant { Ok : vec RegistrationDetails; Err : ErrorInfo };
type Result_2 = variant { Ok : RegistrationDetails; Err : ErrorInfo };
type Result_3 = variant { Ok : nat64; Err : ErrorInfo };
type Result_4 = variant { Ok : GetPageOutput; Err : ErrorInfo };
type Result_5 = variant { Ok : principal; Err : ErrorInfo };
type Result_6 = variant { Ok : nat32; Err : ErrorInfo };
service : {
  add_quota : (principal, QuotaType, nat32) -> (Result);
  available : (text) -> (Result) query;
  get_all_details : (GetPageInput) -> (Result_1) query;
  get_details : (text) -> (Result_2) query;
  get_name_expires : (text) -> (Result_3) query;
  get_names : (principal, GetPageInput) -> (Result_4) query;
  get_owner : (text) -> (Result_5) query;
  get_quota : (principal, QuotaType) -> (Result_6) query;
  register_for : (text, principal, nat64) -> (Result);
  register_with_quota : (text, QuotaType) -> (Result);
  sub_quota : (principal, QuotaType, nat32) -> (Result);
}

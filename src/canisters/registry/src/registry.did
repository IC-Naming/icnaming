type BooleanActorResponse = variant { Ok : bool; Err : ErrorInfo };
type ErrorInfo = record { code : nat32; message : text };
type GetControlledNamesResponse = variant {
  Ok : GetPageOutput;
  Err : ErrorInfo;
};
type GetDetailsResponse = variant { Ok : RegistryDto; Err : ErrorInfo };
type GetOwnerResponse = variant { Ok : principal; Err : ErrorInfo };
type GetPageInput = record { offset : nat64; limit : nat64 };
type GetPageOutput = record { items : vec text };
type GetStatsResponse = variant { Ok : Stats; Err : ErrorInfo };
type GetTtlResponse = variant { Ok : nat64; Err : ErrorInfo };
type GetUsersResponse = variant { Ok : RegistryUsers; Err : ErrorInfo };
type RegistryDto = record {
  ttl : nat64;
  resolver : principal;
  owner : principal;
  name : text;
};
type RegistryUsers = record { owner : principal; operators : vec principal };
type StateExportData = record { state_data : vec nat8 };
type StateExportResponse = variant { Ok : StateExportData; Err : ErrorInfo };
type Stats = record { cycles_balance : nat64; registry_count : nat64 };
service : {
  export_state : () -> (StateExportResponse);
  get_controlled_names : (principal, GetPageInput) -> (
      GetControlledNamesResponse,
    ) query;
  get_details : (text) -> (GetDetailsResponse) query;
  get_owner : (text) -> (GetOwnerResponse) query;
  get_resolver : (text) -> (GetOwnerResponse) query;
  get_stats : () -> (GetStatsResponse) query;
  get_ttl : (text) -> (GetTtlResponse) query;
  get_users : (text) -> (GetUsersResponse) query;
  set_approval : (text, principal, bool) -> (BooleanActorResponse);
  set_record : (text, nat64, principal) -> (BooleanActorResponse);
  set_subdomain_owner : (text, text, principal, nat64, principal) -> (
      GetDetailsResponse,
    );
}